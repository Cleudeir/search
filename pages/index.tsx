/* eslint-disable @typescript-eslint/no-unused-vars */
import Head from "next/head";
import styles from "../styles/Home.module.css";
import React, { useEffect, useState } from "react";
import { Data, DataMovie } from "../components/interfaces";
import Movie from "./movie";
import Tv from "./tv";
import Header from "./Header";
import Image from "next/image";

async function getData(url: string): Promise<Data> {
  const data = await fetch(url);
  return await data.json();
}

export default function Home(): JSX.Element {
  const [data, setData] = useState(null);
  const [search, setSearch] = useState(null);
  const [type, setType] = useState(false);
  const [isLoading, setLoading] = useState(true);
  useEffect(() => {
    setSearch(null);
    void (async (): Promise<void> => {
      let _data: any = [];
      if (type) {
        _data = await getData("/api/mapMovie");
      } else {
        _data = await getData("/api/mapTv");
      }
      console.log(_data);
      setData(_data);
      setSearch(_data.slice(20, 26));
    })();
    console.log(type);
  }, [type]);

  function filterData(text: string): void {
    function loop(item: DataMovie): any {
      return item.title.toLowerCase().includes(text.toLowerCase());
    }
    if (type) {
      const _filter: any = data?.filter(loop);
      if (_filter?.length > 0) {
        console.log(_filter.slice(0, 6));
        setSearch(_filter.slice(0, 6));
      }
    } else {
      const _filter = data?.filter(loop);
      if (_filter?.length > 0) {
        console.log(_filter.slice(0, 6));
        setSearch(_filter.slice(0, 6));
      }
    }
  }
  useEffect(() => {
    if (!data) {
      setLoading(true);
    } else {
      setLoading(false);
    }
    console.log(isLoading);
  }, [data]);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Header filterData={filterData} type={type} setType={setType} />
        {!isLoading &&
          (type ? <Movie search={search} /> : <Tv search={search} />)}
        {isLoading && (
          <div
            style={{
              width: "100%",
              height: "90vh",
              display: "flex",
              justifyContent: "center",
              alignItems: "center"
            }}
          >
            <Image
              style={{ padding: "auto" }}
              width={100}
              height={100}
              src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif"
              alt={"loading"}
            />
          </div>
        )}
      </main>
    </>
  );
}
