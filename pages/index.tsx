import Head from 'next/head'
import styles from '../styles/Home.module.css'
import React, { useEffect, useState } from 'react'
import { DataMovie, DataTv } from '../components/interfaces'
import Movie from './movie'
import Tv from './tv'
import Header from './Header'
import Image from 'next/image'

async function getData(url: string): Promise<any> {
  const get = await fetch(url)
  const data: any = (await get.json()) || null
  return data
}

interface PropsStateData {
  [x: string]: any
  data: any
  setData: any
}
export default function Home(): JSX.Element {
  const [data, setData] = useState<PropsStateData | null>(null)
  const [search, setSearch] = useState<PropsStateData | null>(null)
  const [type, setType] = useState<boolean>(true)
  const [isLoading, setLoading] = useState<boolean>(true)

  useEffect(() => {
    setData(null)
    setSearch(null)
    void (async (): Promise<void> => {
      if (type) {
        const _data = await getData('/api/mapMovie')
        setData(_data)
        const num = 0
        setSearch(_data?.slice(num, num + 6))
      } else {
        const _data = await getData('/api/mapTv')
        setData(_data)
        const num = 200
        setSearch(_data?.slice(num, num + 6))
      }
    })()
  }, [type])

  function filterData(text: string): void {
    if (!data) {
      return
    }
    const _data = data
    const _filter = _data.filter((item: any): any =>
      item.title.toLowerCase().includes(text.toLowerCase())
    )
    if (_filter?.length > 6) {
      setSearch(_filter.slice(0, 6))
    } else if (_filter.length > 0) {
      setSearch(_filter)
    }
  }
  useEffect(() => {
    if (!data) {
      setLoading(true)
    } else {
      setLoading(false)
    }
  }, [data])
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Header filterData={filterData} type={type} setType={setType} />
        {!isLoading &&
          search &&
          (type ? <Movie search={search} /> : <Tv search={search} />)}
        {isLoading && (
          <div
            style={{
              width: '100%',
              height: '90vh',
              display: 'flex',
              justifyContent: 'center',
              alignItems: 'center',
            }}
          >
            <Image
              style={{ padding: 'auto' }}
              width={100}
              height={100}
              src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif"
              alt={'loading'}
            />
          </div>
        )}
      </main>
    </>
  )
}
